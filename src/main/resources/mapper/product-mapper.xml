<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="product">

	
	<!-- devLang = 객체: 배열 / DB: 문자열 => 따로 선언을 해주면 됨 -->
	<resultMap type="productListJoin" id="productListJoinMap">			
	</resultMap>
	
	<!-- result타입에는 컬렉션을 쓰는게 아님. 해당하는 vo객체 또는 resultMap을 써야함 -->
	<select id="selectProductList" resultMap="productListJoinMap">    
		select x.product_code,  x.product_name, y.new_p_img_path, x.price, (select round(avg(z.review_star),3) from product_review z where x.product_code= z.product_code) review_star ,  x.product_delete
		from product x
		inner join product_img y
		on x.product_code = y.product_code
		where p_img_code in (select min(p_img_code) from product_img group by product_code)
		order by product_code desc  
	</select>
 
 
 	<select id="reviewStarOrder" resultMap="productListJoinMap">
 	select x.product_code,  x.product_name, y.new_p_img_path, x.price, (select avg(z.review_star) from product_review z where x.product_code= z.product_code) review_star
		from product x
		inner join product_img y
		on x.product_code = y.product_code
		where p_img_code in (select min(p_img_code) from product_img group by product_code)
		order by review_star desc nulls last
 	</select>
 
 	<select id="highPriceOrder" resultMap="productListJoinMap">
 	select x.product_code,  x.product_name, y.new_p_img_path, x.price, (select avg(z.review_star) from product_review z where x.product_code= z.product_code) review_star
		from product x
		inner join product_img y
		on x.product_code = y.product_code
		where p_img_code in (select min(p_img_code) from product_img group by product_code)
		order by price desc  
 	</select>
 	
 	<select id="lowPriceOrder" resultMap="productListJoinMap">
 	select x.product_code,  x.product_name, y.new_p_img_path, x.price, (select avg(z.review_star) from product_review z where x.product_code= z.product_code) review_star
		from product x
		inner join product_img y
		on x.product_code = y.product_code
		where p_img_code in (select min(p_img_code) from product_img group by product_code)
		order by price asc  
 	</select>
 

 	<select id="writeDateOrder" resultMap="productListJoinMap">
 	select x.product_code, x.write_date,  x.product_name, y.new_p_img_path, x.price, (select avg(z.review_star) from product_review z where x.product_code= z.product_code) review_star
		from product x
		inner join product_img y
		on x.product_code = y.product_code
		where p_img_code in (select min(p_img_code) from product_img group by product_code)
		order by write_date desc  
 	</select>
 
 
 	<select id="selectCategoryList" resultType="productCategory">
 		select * from product_category
 	</select>
 
 	
 	
 	<select id="selectReviewImg" parameterType="int" resultType="ProductReviewImgJoin">
 		select x.product_code, y.review_code, y.new_review_img_path
 		from product_review x
 		inner join product_review_img y
 		on x.review_code=y.review_code	
 		WHERE product_code=#{product_code} 	
 	</select>	
 
 
 	<select id="selectDetailImg" parameterType="int" resultType="ProductDetailImg">
 		select *
 		from product_detail_img
 		WHERE product_code=#{product_code} 	
 	</select>	
 
 	<select id="selectImgList" parameterType="int" resultType="productImg">
 		select *
 		from product_img
 		WHERE product_code=#{product_code} 	
 	</select>	
 
	<insert id="insertProduct" parameterType="product">
	INSERT INTO product (product_code, price, product_name, release_date,country,real_size,p_category_code,p_board_content,write_date,product_delete) 
	VALUES(PRODUCT_SEQ.NEXTVAL,#{price},#{product_name},#{release_date},#{country},#{real_size},#{p_category_code},#{p_board_content},sysdate,'N')
	<selectKey keyProperty="product_code" resultType="_int" order="AFTER"> SELECT PRODUCT_SEQ.CURRVAL FROM DUAL </selectKey>
	</insert>
	
	<insert id="insertImgList" parameterType="productImg">
	INSERT INTO product_img(p_img_code, p_img_path, new_p_img_path, product_code) 
	VALUES(product_img_seq.nextval,#{p_img_path},#{new_p_img_path},#{product_code})
	</insert>
  
  	<insert id="insertDetail" parameterType="productDetailImg">
  	INSERT INTO product_detail_img(p_detail_img_code,p_detail_img_path,new_p_detail_img_path,product_code)
  	VALUES(product_detail_img_seq.nextval,#{p_detail_img_path},#{new_p_detail_img_path},#{product_code})	
  	</insert>
  
  	<insert id="insertOption" parameterType="productOption">
  	INSERT INTO product_option VALUES (product_option_seq.nextval,#{option_size},#{left_amount},#{product_code})
  	</insert>
  
  	<select id="selectProduct" parameterType="int" resultType="productJoinCategory">
  	SELECT * FROM product JOIN product_category using(p_category_code) WHERE product_code=#{product_code} 
  	</select>
  	
  	<select id="selectOption" parameterType="int" resultType="productOption">
  	SELECT * FROM product_option WHERE product_code=#{product_code} 
  	</select>
  	
  	<select id="selectReview" parameterType="int" resultType="productReview">
  	 select * from product_review WHERE product_code=#{product_code} 
  	</select>
  	
  	<insert id="insertCart" parameterType="cart">
  	insert into cart values(cart_seq.nextval,#{product_code},#{cart_quantity},#{member_id},sysdate,#{product_option_code})
  	</insert>
  	
  	<select id="selectCartList" parameterType="string" resultType="cartJoinList">
  	select c.product_code, c.product_name, a.cart_code, a.PRODUCT_OPTION_CODE, a.CART_QUANTITY, b.OPTION_SIZE, b.left_amount, d.new_p_img_path, c.price , c.product_delete
  	from cart a
  	join product_option b on a.product_option_code=b.product_option_code
  	join product c on b.product_code=c.product_code
  	join product_img d on c.product_code=d.product_code
  	where p_img_code in (select min(p_img_code) from product_img group by product_code)
  	and member_id=#{member_id}
  	order by cart_date desc
  	</select>
  	
  	<select id="selectCartList2" parameterType="hashmap" resultType="java.util.Map">
  	select c.product_code, c.product_name, a.cart_code, a.PRODUCT_OPTION_CODE, a.CART_QUANTITY, b.OPTION_SIZE, b.left_amount, d.new_p_img_path, c.price, c.product_delete
  	from cart a
  	join product_option b on a.product_option_code=b.product_option_code
  	join product c on b.product_code=c.product_code
  	join product_img d on c.product_code=d.product_code
  	where p_img_code in (select min(p_img_code) from product_img group by product_code)
  	and cart_code in
  	<foreach collection="array" item="item" index="index" separator="," open="(" close=")">
    	${array[index]}
    </foreach>
  	order by cart_date desc
  	</select>

	<update id="plusCart" parameterType="cart">
		update cart set cart_quantity=cart_quantity+#{cart_quantity} where cart_code=#{cart_code}
	</update>
	
	<update id="changeCart" parameterType="cart">
		update cart set cart_quantity=#{cart_quantity} where cart_code=#{cart_code}
	</update>
	
	<delete id="deleteCart" parameterType="_int">
		delete from cart where cart_code=#{cart_code}
	</delete>
	
	<delete id="deleteSelectCart" parameterType="java.util.Map">
		delete from cart where cart_code in
		<foreach collection="array" item="item" index="index" separator="," open="(" close=")">
    		${array[index]}
    	</foreach>
	</delete>
	
	<select id="selectProductJoinOption" parameterType="int" resultType="productJoinOption">
		select a.product_code, product_option_code, option_size, 
		price, product_name, new_p_img_path from product a 
		join product_option b on(a.product_code=b.product_code) 
		join product_img c on a.product_code=c.product_code
		where product_option_code=#{product_option_code}
		and p_img_code = (select min(p_img_code) from product_img where product_code=a.product_code)
	</select>

	<insert id="insertBuy" parameterType="buyInfo">
        insert into buy_info values(buy_info_seq.nextval, #{product_option_code}, 
        #{buy_quantity}, #{member_id}, #{receiver_post_no},
        #{receiver_address}, #{receiver_d_address},#{receiver_name},
        #{phone2},#{request}, SYSDATE,#{total_price},#{buy_status})
    </insert>
    
    <insert id="insertPoint" parameterType="pointLog">
    	insert into point_log values(point_log_seq.nextval,#{member_id},#{point_increase},#{point_content},sysdate)
    </insert>
    
    <select id="selectPoint" parameterType="string" resultType="_int">
    	select nvl(sum(point_increase),0) from point_log where member_id=#{member_id}
    </select>
    
    <update id="updateLeftList" parameterType="buyInfo">
    	update product_option set left_amount=left_amount-#{buy_quantity} where product_option_code=#{product_option_code}
    </update>
    
  	<insert id="reviewInsert" parameterType="productReview">
  	INSERT INTO product_review VALUES (product_review_seq.nextval,#{member_id},#{review_star},#{review_content},sysdate,#{product_code})
 	<selectKey keyProperty="review_code" resultType="_int" order="AFTER"> SELECT product_review_seq.CURRVAL FROM DUAL </selectKey>
  	</insert>
  	
  	<insert id="insertReviewImg"  parameterType="productReviewImg">
  	INSERT INTO product_review_img 	VALUES(product_review_img_seq.nextval,#{review_img_path},#{new_review_img_path},#{review_code})	
  	</insert>
  	
  	<insert id="addQuestion"  parameterType="ProductQuestion">
  	<choose>
  		<when test="p_question_code_ref  == 0">
  	 	 INSERT INTO product_question VALUES(product_question_seq.nextval,#{member_id},#{p_question_content},sysdate,#{product_code},'N',#{question_level},default)	
  		</when>
  		
  		<otherwise>
  		INSERT INTO product_question VALUES(product_question_seq.nextval,#{member_id},#{p_question_content},sysdate,#{product_code},'N',#{question_level},#{p_question_code_ref})	
  		</otherwise>
  	</choose> 	
  	</insert>
  	
  	<delete id="deleteQuestion" parameterType="_int">
  		delete from product_question where p_question_code=#{p_question_code}
  	</delete>
  	
  	
  	<select id="selectQuestion" parameterType="int" resultType="ProductQuestion">
  	select *
	from product_question A
	where product_code=#{product_code} start with question_level=1 connect by prior p_question_code=p_question_code_ref order siblings by question_date asc
  	</select>
  	
  	
  	<insert id="addLike" parameterType="ProductReviewLike">
  		insert into product_review_like values(#{review_code},#{member_id},#{like_status})
  	</insert>
  	
  	<select id="selectLike" parameterType="_int" resultType="ProductReviewLike">
  		select * from product_review_like where review_code=#{review_code}		
  	</select>
  	
  	<delete id="deleteLike" parameterType="ProductReviewLike">
  		delete from product_review_like where review_code=#{review_code} and member_id=#{member_id}	
  	</delete>
  	
  	<update id="updateLike" parameterType="ProductReviewLike">
  		update product_review_like set  like_status=#{like_status} where review_code=#{review_code} and member_id=#{member_id}	
  	</update>
  	
  
 	 <resultMap type="ProductReviewLike" id="ProductReviewLikeMap">			
	</resultMap>
  
  	<select id="selectLikeList" resultMap="ProductReviewLikeMap">
  		select * from product_review_like
  	</select>


 
  	<select id="selectLikeList1" resultMap="ProductReviewLikeMap">
  		select * from product_review_like where review_code=#{review_code}
  	</select>
  	<!-- <resultMap type="map" id="countLikeMap"></resultMap>
  	<select id="selectlikeCountList" resultMap="countLikeMap">
  		select review_code,count(*) as cnt
		from product_review_like
		where like_status=#{status}
		group by review_code
  	</select>
 	-->

 	
 	<select id="checkLike" resultType="string" parameterType="map">
 		select like_status from product_review_like where member_id=#{id} and review_code=#{code}
 	</select>
 
 	<resultMap type="map" id="likecount"></resultMap>
 
 	<select id="ycountLike" parameterType="_int" resultMap="likecount">
 		select review_code, count(*) as CNT from product_review_like
 		where like_status='Y' 
 		group by review_code
 	</select>
 
 
	<select id="ncountLike" parameterType="_int" resultMap="likecount">
 		select review_code, count(*) as CNT from product_review_like
 		where like_status='N' 
 		group by review_code
 	</select>
 	
 	<update id="deleteProduct" parameterType="_int">
 		update product set product_delete='Y' where product_code=#{product_code}
 	</update>
</mapper>