<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">
 	
 	<resultMap type="member" id="memberMap">
 	</resultMap>
 	
 
 	<insert id="insertMember" parameterType="member">
 		insert into member values(#{member_id},#{member_pw},#{member_name},#{birthday},#{gender},#{phone},#{post_no},#{address},#{detail_address},#{email},#{email_alarm},'user',sysdate,'Y')

 	</insert>
 	
 	<update id="createAuthKey" parameterType="member">
		update member set esc_status = 'Y' where email = #{email}
	</update>
 	
 	<update id="userAuth">
 		update member set esc_status ='N' where email =#{email}
 	</update>
 	
 	<select id="selectByEmail" resultType="string">
 		select member_name from member where email=#{email}
 	</select>

	<select id="loginCheck" parameterType="string" resultMap="memberMap">
		select * from member where member_id=#{userId}
	</select>
	
	<select id="findMemberId" parameterType="string" resultType="string">
		select member_id from member where email=#{email}
	</select>
	
	<update id="tempPassword" parameterType="member">
		update member set member_pw=#{member_pw} where member_id=#{member_id} 
	</update>
 
  	<select id="duplicateIdCheck" parameterType="string" resultType="_int">
 		select count(*) from member where member_id=#{id}
	</select>
	<select id="duplicateEmailCheck" parameterType="string" resultType="_int">
		select count(*) from member where email=#{email}
	</select>
	
	
	<select id="selectEncode" parameterType="string" resultType="string">
	 	select member_pw from member where member_id=#{id}
	</select>
	
	<update id="memberUpdate" parameterType="member">
		update member set member_name=#{member_name}, 
			birthday=#{birthday}, 
			email=#{email}, phone=#{phone}, 
			post_no=#{post_no}, address=#{address}, 
			detail_address=#{detail_address}, 
			gender=#{gender}, 
			email_alarm=#{email_alarm}
			<if test='member_pw!=""'>
				,member_pw=#{member_pw}
			</if> 
		where member_id=#{member_id}
	</update>
	
	<update id="withdrawMember" parameterType="string">
		update member set esc_status='E' where member_id=#{member_id}
	</update>
	
	<select id="memberList" resultType="member">
		select * from member order by join_date desc
	</select>
	
	<select id="selectMemberCount" resultType="_int">
		select count(*) from member 
	</select>
	
	<select id="selectMemberCountInfo" resultType="_int" parameterType="string">
		select count(*) from member where member_id like '%'||#{info}||'%'
	</select>
	
	<select id="selectMember" resultType="member">
		select * from member where member_id=#{member_id}
	</select>
	
	<update id="updateManagement" parameterType="member">
		update member set esc_status=#{esc_status},
							member_level=#{member_level}
							 where member_id=#{member_id} 
	</update>
	
	<select id="memberSearch" resultType="member" parameterType="string">
		select * from member where member_id like '%'||#{info}||'%'
	</select>
 
 	<select id="selectPointList" resultType="pointLog" parameterType="string">
 		select * from point_log where member_id=#{member_id} order by point_date
 	</select>
 	
 	<select id="totalPoint" resultType="_int" parameterType="string">
 		select sum(point_increase) from point_log where member_id=#{member_id} group by member_id
 	</select>
 	
 	<resultMap type="map" id="selectOrderMap"></resultMap>
 	<select id="selectOrderList" parameterType="string" resultMap="selectOrderMap">
 		select p.product_code, p.product_name, po.option_size, b.buy_code, b.buy_quantity,
 		b.total_price, b.buy_date, b.buy_status, pi.new_p_img_path
 		from product p
 		join product_option po on (p.product_code=po.product_code)
 		join product_img pi on (p.product_code=pi.product_code)
 		join buy_info b on (po.product_option_code=b.product_option_code)
 		where p_img_code in (select min(p_img_code) from product_img group by product_code)
	  	and member_id=#{member_id}
	  	order by buy_date desc
 	</select>
 	
 	<select id="orderListCount" resultType="_int" parameterType="string">
 	select count(*) from buy_info where member_id=#{member_id}
 	</select>
 	
 	<select id="selectOrderList2" parameterType="string" resultMap="selectOrderMap">
 		select p.product_code, p.product_name, po.option_size, b.buy_code, b.member_id,
 		b.buy_quantity, b.total_price, b.buy_date, b.buy_status, pi.new_p_img_path
 		from product p
 		join product_option po on (p.product_code=po.product_code)
 		join product_img pi on (p.product_code=pi.product_code)
 		join buy_info b on (po.product_option_code=b.product_option_code)
 		where p_img_code in (select min(p_img_code) from product_img group by product_code)
	  	order by buy_date desc
 	</select>
 	
 	<update id="updateBuyStatus" parameterType="buyinfo">
 		update buy_info set buy_status=#{buy_status} where buy_code=#{buy_code}
 	</update>
 	
 	<insert id="insertQuestion" parameterType="question">
 		insert into question values(question_seq.nextval,
 										#{member_id},
 											#{question_content},
 												sysdate,
 													default)
 	</insert>
 	
 	<select id="selectQuestionList" resultType="question">
 		select * from question where member_id = #{member_id}
 	</select>
 	
 	<select id="selectedQuestion" resultType="question" parameterType="_int">
 		select * from question where question_code = #{question_code} 
 	</select>
 	
 	<select id="adminQuestionList" resultType="question">
 		select * from question order by status 
 	</select>
 	
 	<insert id="insertAnswer" parameterType="answer">
 		insert into answer values(#{question_code},#{member_id},#{answer_content},sysdate)
 	</insert>
 	
 	<update id="updateQuestionStatus" parameterType="_int">
 		update question set status='Y' where question_code=#{question_code}
 	</update>
 	
 	<select id="selectedAnswer" parameterType="_int" resultType="answer">
 		select * from answer where question_code =#{question_code}
 	</select>
</mapper>
